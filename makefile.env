ROOT_DIR  = $(shell pwd)
OUT_DIR   = $(ROOT_DIR)/ebin

# 查找当前目录下是否有C/C++文件
C_FILES   = $(shell find . -name "*.c" -type f -print | xargs echo)
CPP_FILES = $(shell find . -name "*.cpp" -type f -print | xargs echo)


#如果查找的结果不为空，即要编译C/C++文件, 执行ERL， 找到erlang的头文件及库文件目录
ifneq ($(strip $(C_FILES) $(CPP_FILES)),)

	ERL_ROOT  ?= $(shell erl -noshell -eval 'io:format("~s~n", [code:root_dir()]).' -s init stop)
	ERTS_ROOT ?= $(ERL_ROOT)/usr

	INCLUDES += -I$(ERTS_ROOT)/include
	LIBS     += -L$(ERTS_ROOT)/lib -lerts

	EI_ROOT  ?= $(shell erl -noshell -eval 'io:format("~s~n", [code:lib_dir(erl_interface)]).' -s init stop)

	INCLUDES += -I$(EI_ROOT)/include
	LIBS     += -L$(EI_ROOT)/lib -lei -lerl_interface -lrt

	ifeq ($(shell uname), Darwin)
	  OPTIONS   += -fno-common -bundle -undefined suppress -flat_namespace
	  USR_LOCAL = /opt/local
	else
	  USR_LOCAL = /usr/local
	endif

	INCLUDES += -I$(USR_LOCAL)/include
	LIBS     += -L$(USR_LOCAL)/lib

	# 导出头文件及库文件目录给子目录的make用
	export INCLUDES LIBS
endif

EINCLUDES  ?= $(shell for loop in `find . -name "*.hrl" -type f -print | xargs echo | sed "s/\.\///g" | sed "s/\/\w*\.hrl//g"`; \
                      do \
                          NEWINCLUDE=-I\""`pwd`"/$$loop\"; \
                          if [ ! "$$NEWINCLUDE" = "$$OLDINCLUDE" ]; then \
                              echo "$$NEWINCLUDE"; \
                          fi ; \
                          OLDINCLUDE=$$NEWINCLUDE; \
                      done)
                     
HRL_FILES ?= $(shell for loop in `find . -name "*.hrl" -type f -print | xargs echo | sed "s/\.\///g"`;\
                     do  \
                         echo "`pwd`/$$loop "; \
                     done)

export ROOT_DIR OUT_DIR EINCLUDES HRL_FILESS
